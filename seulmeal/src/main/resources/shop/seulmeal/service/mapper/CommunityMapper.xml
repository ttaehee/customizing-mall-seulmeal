<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="shop.seulmeal.service.mapper.CommunityMapper">


	<!-- 1. Post -->
	<resultMap type="shop.seulmeal.service.domain.Post"
		id="postSelectMap">
		<result property="postNo" column="post_no" jdbcType="NUMERIC" />
		<result property="user.userId" column="user_id" jdbcType="VARCHAR" />
		<result property="title" column="title" jdbcType="NUMERIC" />
		<result property="content" column="content" jdbcType="VARCHAR" />
		<result property="shortContent" column="short_content" jdbcType="VARCHAR" />
		<result property="views" column="views" jdbcType="NUMERIC" />
		<result property="commentCount" column="comment_count" jdbcType="NUMERIC" />
		<result property="likeCount" column="like_count" jdbcType="NUMERIC" />
		<result property="thumnail" column="thumnail" jdbcType="VARCHAR" />
		<result property="regDate" column="reg_date" jdbcType="DATE" />
		<result property="updateDate" column="update_date" jdbcType="DATE" />
		<result property="endDate" column="end_date" jdbcType="DATE" />
		<result property="postStatus" column="post_status" jdbcType="CHAR" />
		<result property="publicStatus" column="public_status" jdbcType="CHAR" />
		<result property="password" column="password" jdbcType="NUMERIC" />
		<result property="answerStatus" column="answer_status" jdbcType="CHAR" />
		<result property="status" column="status" jdbcType="CHAR" />
	</resultMap>
	
	

	<insert id="insertPost" parameterType="Post">
		INSERT INTO 
			post(
				post_no, 
				user_id, 
				title, 
				content, 
				reg_date,
				post_status)
		VALUES(
			seq_post_no.nextval, 
			#{user.userId}, 
			#{title}, 
			#{content}, 
			SYSDATE, 
			'0')
		<selectKey keyProperty="postNo" resultType="int"
			order="AFTER">
			SELECT seq_post_no.CURRVAL FROM DUAL
		</selectKey>
	</insert>

	<select id="getPost" parameterType="int" resultMap="postSelectMap">
		SELECT * FROM post
		<where>
			post_no = #{postNo}
			AND post_status = '0'
			AND status = '0'
		</where>
	</select>

	<!--  전체 게시글 목록 -->
	<!--  '1' : 조회순, '2' : 베스트순, '3': 최신순--><!-- map : search / userId -->
	<select id="getListPost" parameterType="map" resultMap="postSelectMap">
		SELECT *
		FROM	(SELECT inner_table.*, ROWNUM AS row_seq
				FROM	(SELECT * FROM post	  
						  	<where>
						  		post_status = '0'
						  		AND status = '0'
						  		<if test="searchKeyword != null and userId == null">
						  			AND (title LIKE ('%'||#{searchKeyword}||'%') OR content LIKE ('%'||#{searchKeyword}||'%'))
						  		</if>	
						  		<if test="userId != null">
						  			AND user_id = #{userId}	
						  		</if>
						  	</where>
						 			
							ORDER BY
							<if test="searchCondition != null">
								<choose>
									<when test="searchCondition == 1">views</when>
									<when test="searchCondition == 2">like_count</when>
									<when test="searchCondition == 3">reg_date</when>
								</choose>
							</if>
							<if test="searchCondition == null">
								reg_date
							</if>
							 )inner_table
				WHERE ROWNUM &lt;= #{search.endRowNum})
		WHERE row_seq BETWEEN #{search.startRowNum} AND #{search.endRowNum}
	</select>
	
		<!-- X -->
	<!--  내 게시글 목록-->
	<select id="getListMyPost" parameterType="String" resultMap="postSelectMap">
		SELECT * FROM post
		<where>
			post_status = '0'
			AND status = '0'
			AND user_id = #{userId}
		</where>
	</select>
	
	
	<!-- ROW Count -->
	<select id="getPostTotalCount" parameterType="shop.seulmeal.common.Search" resultType="int">
		SELECT COUNT(*)
	  	FROM(	SELECT * FROM post	  
	  	<where>
	  		post_status = '0'
	  		AND status = '0'
	  		<if test="searchKeyword != null ">
	  			AND (title like ('%'||#{searchKeyword}||'%') OR content like ('%'||#{searchKeyword}||'%'))	
	  		</if>
	  	</where> ) countTable
	</select>
	
	<update id="updatePost" parameterType="Post">
		UPDATE post
		<set> 
			title = #{title}, content = #{content}, update_date = SYSDATE
		</set>
		<where>
			post_no = #{postNo}
			AND post_status = '0'
			AND status = '0'
		</where>
	</update>

	<update id="deletePost" parameterType="int">
		UPDATE post
		<set> 
			status = '1'
		</set>
		<where>
			post_no = #{postNo}
			AND post_status = '0'
			AND status = '0'
		</where>
	</update>

	<update id="deletePostAll">
		UPDATE post
		<set>
			status = '1'
		</set>
		<where>
			post_status = '0'
			AND status = '0'
		</where>
	</update>




	<!-- 2. Comment -->
	<resultMap type="shop.seulmeal.service.domain.Comment" id="commentSelectMap">
		<result property="commentNo" column="comment_no" jdbcType="NUMERIC" />
		<result property="user.userId" column="user_id" jdbcType="VARCHAR" />
		<result property="user.nickName" column="nickname" jdbcType="VARCHAR" />
		<result property="postNo" column="post_no" jdbcType="NUMERIC" />
		<result property="content" column="content" jdbcType="VARCHAR" />
		<result property="layer" column="layer" jdbcType="CHAR" />
		<result property="regDate" column="reg_date" jdbcType="DATE" />
		<result property="updateDate" column="update_date" jdbcType="DATE" />
		<result property="likeCount" column="like_count" jdbcType="NUMERIC" />
		<result property="parentCommentNo" column="parent_comment_no" jdbcType="INTEGER" />
		<result property="status" column="status" jdbcType="CHAR" />
	</resultMap>
	
	
	<insert id="insertComment" parameterType="Comment">
		INSERT INTO 
			comments(comment_no, user_id, nickname, post_no, content, layer, reg_date, parent_comment_no, status)
		VALUES (seq_comment_no.nextval, 
			#{user.userId},
			#{user.nickName}, 
			#{postNo}, 
			#{content}, 
			#{layer}, 
			SYSDATE, 
			#{parentCommentNo:INTEGER}, 
			#{status})
			<selectKey keyProperty="commentNo" resultType="int" order="AFTER">
			SELECT seq_comment_no.CURRVAL FROM DUAL
			</selectKey>
	</insert>

	<update id="updateComment" parameterType="Comment">
		UPDATE 
			comments 
		<set> 
			content = #{content},
			update_date = SYSDATE
		</set>
		<where>
			comment_no = #{commentNo}
			AND status = '0'
		</where>
	</update>

	<update id="deleteComment" parameterType="int">
		UPDATE 
			comments 
		<set>
			status = '1'
		</set>
		<where> 
			comment_no = #{commentNo}
			AND status = '0'
		</where>
	</update>


	<select id="getListComment" parameterType="int" resultMap="commentSelectMap">
		SELECT 
			comment_no, user_id, nickname, content, layer, reg_date, 
			update_date, like_count, parent_comment_no, status
		FROM comments
		<where>
			post_no = #{postNo}
			AND status = '0'
		</where>
	</select>

	<select id="getCommentTotalCount" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM comments
		<where>
			post_no = #{postNo}
			AND status = '0'
		</where>
	</select>


	<!-- 3. Report -->
	<resultMap type="shop.seulmeal.service.domain.Report" id="reportSelectMap">
		<result property="reportNo" column="report_no" jdbcType="NUMERIC" />
		<result property="postNo" column="post_no" jdbcType="NUMERIC" />
		<result property="reporterId" column="reporter_id" jdbcType="VARCHAR" />
		<result property="reason" column="reason" jdbcType="VARCHAR" />
		<result property="regDate" column="reg_date" jdbcType="DATE" />
		<result property="status" column="status" jdbcType="CHAR" />
	</resultMap>	
	
	<insert id="insertReportPost" parameterType="Report">
		INSERT INTO 
            report(
                report_no, 
                post_no, 
                reporter_id, 
                reason,
                reg_date,
                status        
            )
        VALUES(
            seq_report_no.nextval,
            #{postNo},
            #{reporterId},
            #{reason},
            SYSDATE,
            '0')
	</insert>
	
	<update id="deleteReportPost" parameterType="int">
		UPDATE 
            report
        SET 
            status = '1'
        WHERE status = '0'
        AND post_no = #{postNo}
	</update>

	<!--  X , 페이징 처리 -->
	<select id="getListReportPost" resultMap="reportSelectMap">
		SELECT 
            report_no, 
            post_no, 
            reporter_id, 
            reason,
            reg_date,
            status
        FROM 
            report
        <where>
        	status = '0'
        </where>
        ORDER BY reg_date DESC
	</select>
	
	<delete id="deleteReportPostAll">
		DELETE FROM report
	</delete>



	<!-- 4. Like -->
	
	<!-- 좋아요 체크 X-->
	<update id="checkLike" parameterType="Like">

	</update>

	<!-- 좋아요 -->
	<insert id="insertLike" parameterType="Like">
		INSERT INTO
			likes(like_no, user_id, post_no, comment_no, product_no)
		VALUES
			(seq_like_no.nextval, #{userId}, #{postNo:INTEGER}, #{commentNo:INTEGER}, #{productNo:INTEGER})
	</insert>
	
	<!-- 게시글 좋아요 +1 -->
	<update id="postLikeCountUp" parameterType="int">
		UPDATE post
		<set>
			like_count = like_count + 1
		</set>
		<where>
			post_no = #{postNo}
		</where>
	</update>
	
	
	
	<!-- 좋아요 취소 -->
	<delete id="deleteLike" parameterType="Like">
		DELETE FROM 
			likes
		<where> 
			user_id = #{userId}
			AND post_no = #{postNo}
		</where> 
	</delete>
	
	<!-- 게시글 좋아요 -1 -->
	<update id="postLikeCountDown" parameterType="int">
		UPDATE post
		<set>
			like_count = like_count - 1
		</set>	
		<where>
			post_no = #{postNo}
		</where> 
	</update>

	<!-- 게시글 좋아요 수 조회 -->
	<select id="getPostLikeCount" parameterType="int" resultType="int">
		SELECT like_count
		FROM post
		<where>
			post_no = #{postNo}
			AND post_status = '0'
			AND status = '0'			
		</where>
	</select>




	<!-- 5. Follow -->
	<insert id="insertFollow" parameterType="Relation">
		INSERT INTO 
			relation(
				relation_no, 
				user_id, 
				relation_user_id, 
				reg_date, 
				relation_status)
		VALUES(
			seq_relation_no.nextval, 
			#{userId}, 
			#{followingUserId}, 
			SYSDATE, 
			'0')
	</insert>

	<!--  X , 페이징 처리 -->
	<select id="getListFollow">
		SELECT 
			relation_user_id 
		FROM 
			relation
		<where>
			relation_status = '0'
			AND user_id = #{userId}
		</where>
		
	</select>
	
	<!--  X , 페이징 처리 -->
	<select id="getListFollower">
		SELECT 
			user_id 
		FROM 
			relation
		<where>
			relation_status = '0'
			AND relation_user_id= #{followingUserId}
		</where>
	</select>
	

	<delete id="deleteFollow" parameterType="Relation">
		DELETE FROM 
			relation
		<where>
			relation_status = '0'
			AND user_id = #{userId} 
			AND relation_user_id = #{followingUserId}
		</where>
	</delete>


	<update id="updateRelation" parameterType="Relation">

		UPDATE 
            relation
        <set> 
        	relation_status = '1'
        </set>
        <where>
			ralation_status = '0'
	        AND user_id = #{userId}
	        AND relation_user_id = #{followingUserId}
        </where>
	</update>
	
	<delete id="deleteFollowAll">
		DELETE FROM relation
		<where>
			relation_status = '0'
		</where>
	</delete>


	<!-- 6. Block -->

	<resultMap type="Relation" id="relationSelectMap">
		<result property="relationNo" column="relation_no" jdbcType="NUMERIC" />
		<result property="relationUser.userId" column="user_id" jdbcType="VARCHAR" />
		<result property="relationUser.nickName" column="nickname" jdbcType="VARCHAR" />
		<result property="relationUser.profileImage" column="profile_image" jdbcType="VARCHAR" />
		<result property="relationUser.profileMessage" column="profile_message" jdbcType="VARCHAR" />
		<result property="relationStatus" column="relation_status" jdbcType="VARCHAR" />
		<result property="regDate" column="reg_date" jdbcType="DATE" />
	</resultMap>
	

	<insert id="insertBlock" parameterType="Relation">
		INSERT INTO relation(relation_no, user_id, relation_user_id, reg_date, relation_status)
		VALUES(seq_relation_no.nextval, #{userId}, #{relationUser.userId}, SYSDATE, '1')
	</insert>
	
	
	<!-- 차단 리스트 -->
	<select id="getListBlock" parameterType="map" resultMap="relationSelectMap">
		SELECT *
		FROM	(SELECT inner_table.*, ROWNUM AS row_seq
				FROM	(SELECT r.*, u.nickname, u.profile_image,u.profile_message
						 FROM relation r, users u
							<where>
								r.relation_user_id = u.user_id
								<if test="userId != null">
									AND r.user_id = #{userId}
								</if>								
								AND relation_status = 1
								<if test="search.searchKeyword != null">
									AND relation_user_id = '%'||#{search.searchKeyword}||'%'								
								</if>
							</where>							
							ORDER BY r.reg_date )inner_table
				WHERE ROWNUM &lt;= #{search.endRowNum})
		WHERE row_seq BETWEEN #{search.startRowNum} AND #{search.endRowNum}	
	</select>
	
	<!-- 차단리스트 총숫자 -->
	<select id="getTotalBlackCount" resultType="int" parameterType="map">
		SELECT COUNT(*)
	  	FROM(	SELECT r.* FROM relation r, users u
  							<where>
								r.relation_user_id = u.user_id
								<if test="userId != null">
									AND r.user_id = #{userId}
								</if>
								AND relation_status = 1
								<if test="search.searchKeyword != null">
									AND relation_user_id = '%'||#{search.searchKeyword}||'%'								
								</if>
							</where> ) countTable
	</select>
	
	
	<delete id="deleteBlock" parameterType="Relation">
		DELETE FROM 
			relation
		<where>
			relation_no = #{relationNo}
		</where>
	</delete>

	<delete id="deleteBlockAll" >
		DELETE FROM 
			relation
		<where>
			relation_status = '1'
		</where>
	</delete>



	<!-- list -->










</mapper>